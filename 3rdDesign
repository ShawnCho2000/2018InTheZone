#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in1,    ExternalBatteryValue, sensorAnalog)
#pragma config(Sensor, in2,    GyroPosition,   sensorGyro)
#pragma config(Sensor, in3,    liftPosition,   sensorPotentiometer)
#pragma config(Sensor, in4,    lineRight,      sensorLineFollower)
#pragma config(Sensor, in5,    lineLeft,       sensorLineFollower)
#pragma config(Sensor, in6,    clawLiftPosition, sensorPotentiometer)
#pragma config(Sensor, in7,    mobileLiftPosition, sensorPotentiometer)
#pragma config(Sensor, in8,    lineBack,       sensorLineFollower)
#pragma config(Sensor, dgtl1,  clawLiftUp,     sensorTouch)
#pragma config(Sensor, dgtl3,  clawLiftDown,   sensorNone)
#pragma config(Sensor, dgtl4,  liftDown,       sensorTouch)
#pragma config(Sensor, dgtl5,  mobileLiftDown, sensorTouch)
#pragma config(Sensor, dgtl6,  stationaryGoal, sensorTouch)
#pragma config(Sensor, dgtl11, coneHeight,     sensorNone)
#pragma config(Sensor, dgtl12, clawLiftPosition, sensorNone)
#pragma config(Sensor, I2C_1,  RearRight,      sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Motor,  port1,           clawMotor,     tmotorVex393HighSpeed_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           wheelRight,    tmotorVex393HighSpeed_MC29, openLoop, reversed, encoderPort, I2C_1)
#pragma config(Motor,  port3,           wheelLeft,     tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           clawLiftL,     tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port5,           clawLiftR,     tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port6,           wheelLeftMid,  tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           armLiftLeftB,  tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port8,           armLiftRightB, tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port9,           wheelRightMid, tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          mobileLift,    tmotorVex393HighSpeed_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
// #pragma config(Motor,  port6,           armLiftLeftT,  tmotorVex393HighSpeed_MC29, openLoop, reversed)
// #pragma config(Motor,  port9,           armLiftRightT, tmotorVex393HighSpeed_MC29, openLoop)

//COLOR CODING!
//clawMotor = puke
//wheelLeftFront = skyblue
//wheelLeftBack = oceanblue
//wheelRightFront = palepink
//wheelRightBack = flamingopink
//clawLiftL = neongreen
//clawLiftR = darkgreen
//armLiftLeftB
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/
//When the potentiometer value is changed, make sure you check the actual
//sensor values and change the program values accordingly
//7D is MinLift, 7R LiftPickMobile, 8D FeedLift
// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

const int MAX_CLAWLIFT = 2900;
const int MIN_CLAWLIFT = 900; //2100 + 300;
const int MID_CLAWLIFT = (MAX_CLAWLIFT + MIN_CLAWLIFT) / 2;
const int ERROR_CLAWLIFT = 300;
const int MAX_MOBILELIFT = 3900;
const int STOP_MOBILELIFT = 2800;
const int HIGHGOAL_MOBILELIFT = 2800;
const int DRIVING_MOBILELIFT = 2700;
// const int HIGHGOAL_MOBILELIFT = 2800;


// const int MAX_LIFT = 1600;
const int MAX_LIFT = 3600;
const int MIN_LIFT = 2100 - 50 ; //620
const int AUTOSTART_LIFT = 1800 ; //620
//const int PICKUP_LIFT = 2000 ; //620

const int FEED_LIFT = 2450 - 150;
//const int MID_LIFT = (MAX_LIFT + MIN_LIFT) / 3;
const int LIFT_PICK_MOBILE = 2200;
const int STATIONARY_LIFT = 2500;

const int GLOBAL_WAITER = 100;
const int GLOBAL_WAITER_LONG = 100;

const int COLOR_DIFF = 30; //comp value: 50
int COLOR_BASE_BACK = 3000;
int COLOR_BASE_RIGHT = 3000;
int COLOR_BASE_LEFT = 3000;

typedef enum {
	Right = 1,
	Left = 2,
	Back = 3
} LineType;

// typedef struct{
// 	LineTypeStruct Type;
// } LineType;

// LineTypeStruct LineType = Back;

int autonomousMode = 1;
const int drivingSkillMode = 7;
// 6: ProgSkill
// 7: DrvSkill


const int FULLPOWER = 127;
const int HALFFULLPOWER = 64;

//const int powerliftUp = 120;
const int powerliftDown = 100;//50;
//const int powerliftDownPickUp = powerliftDown * 2;
const int powerClawLiftUp = 90;
const int powerClawLiftDown = 100;
const int powerClawOpen = 60;
const int powerClawClose = 100;
const int powerClawHold = 60;

string LIFT_STATUS = "";

int CONE_COUNT = 0;
int CONE_COUNT_STATIONARY = 0;
int LIFT_TARGET = MIN_LIFT;
//int STATIONARY_LIFT_TARGET = 0;
int STATIONARY_GOAL_TARGET = 0;

// int GLOGAL_MOBILELIFTPOSITION = 0;

// ---------------------------------------
// TASKS
task move();
task lift();
task claw();
task clawLift();
// END TASKS


// ---------------------------------------
// FUNCTIONS
// LIFT
void moveLift(int power);
void moveLiftUp(int power);
void moveLiftDown(int power);
void holdLift();
void holdLiftAuton();
void holdDownLift();

bool startAuton(int power);
bool moveLiftUpAndStop(int distance, int power);
bool moveLiftUpAndHold(int distance, int power);
bool moveLiftDownAndStop(int distance, int power);
bool moveLiftDownAndHold(int distance, int power);
bool moveLiftUpAndHoldAuton(int distance, int power);
bool moveLiftDownAndHold_Touch(int power);
bool moveLiftDownAndStop_Touch(int power);
bool moveLiftUpAndHold_Smart(int distance, int power);
bool moveLiftUpAndHold_Normal(int distance, int power);

// CLAW LIFT
void moveClawLift(int power);
void moveClawLiftUp(int power);
void moveClawLiftDown(int power);
bool moveClawLiftUpAndStop(int distance, int power);
bool moveClawLiftDownAndStop(int distance, int power);
bool moveClawLiftDownAndContinue(int distance, int power);

// CLAW
void moveClaw(int power);
void openClaw(int power);
void closeClaw(int power);

// MOBILE LIFT
void moveMobileLift(int power);
void moveMobileLiftUp(int power);
void moveMobileLiftUpAuton();
void moveMobileLiftDown(int power);
void moveMobileLiftUpAndStop();
void moveMobileLiftUpAndStopDrivingSkill();
void moveMobileLiftDownAndStop(bool higher);
void moveMobileLiftDownAndStopAuton(int distance);
void moveMobileLiftDownToPickUpAuton();
void stopMobileLift();

// MOVE
//void MoveAccel(int distance, int power);
//void MoveAccelAuton(int distance, int power);
//void MoveAccelMobile(int distance, int power);
// void MoveIEM(int distance, int power);
void MoveHelper(int power);
void TurnGyro(int distance, int power);
void TurnHelper(int power);

// MACRO
void moveMobileLiftUpToStackAuton(int powerLift, int distanceClawLift, int powerClawLift);
void moveMobileLiftDownToPickUp();
bool scoreStationaryGoal_Prepare();
bool scoreStationaryGoal_Part1(int targetSG);
bool scoreStationaryGoal_Part2(int targetMG);
void moveLiftUpForStationaryGoal(int liftValue);
void moveLiftUpForStationaryGoalAuton(int liftValue);


bool LiftDownPickUpClawLiftUpLiftDown_PART1(int target, bool manualFeed);
//void LiftDownPickUpClawLiftUpLiftDown_PART1_2();
bool LiftDownPickUpClawLiftUpLiftDown_PART2(int target, bool manualFeed);
void PickUpAndMoveLiftUp();
bool PushORUpCone(bool pushDown);
void PushAndUpCone();

// BATTERY
int AdjustPowerUsingBatteryLevel(int originalPower);
int AdjustPowerUsingExternalBatteryLevel(int originalPower);
int AdjustPowerUsingExternalBatteryLevelToMove(int originalPower);


// LCD
void AutonomousSelector(int btnLCD);
void DisplayAutonomousMode(int autonomousModeValue);
void displayBatteryLevelOnLCD(int autonomousModeValue);

// SENSORS
int getLiftDown();
int getLiftPosition();
int getMobileLiftPosition();
//int getNewLiftTargetPosition(bool manualFeed, bool increase);
//int getCurrentLiftTargetPosition(bool manualFeed);
int getLiftTargetPosition(bool manualFeed);
//int getTargetLiftTargetPosition1(bool manualFeed);
int getClawLiftPosition();
int getStaionaryGoal();
int getLiftTargetPositionForStationaryGoal();
int getLiftTargetPositionForStationaryGoal_Reverse();
int getLiftTargetPositionForStationaryGoal_Reverse_Increase();
int getLineRight();
int getLineLeft();
int getLineBack();
// void moveLiftUpAndRelease(int distanceLift, int powerLift, int distanceClawLift, int powerClawLift);

// HELPERS
bool autoCommon(int coneCount);
void autonCone20(int coneCount);
void autonCone5(bool leftSide);
void autonStationary();
void programmingSkill();
void programmingSkillFirst();
void pickOneMoreCone();

void HitBarAndAlign();
bool Prepare_2ND_MG();
bool programmingSkill_Pick_2nd_MG();
bool programmingSkill_Pick_3rd_MG();

void stopAll();
void stopLift();
void stopClawLift();
void stopClaw();

// END FUNCTIONS

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks
	// running between Autonomous and Driver controlled modes. You will need to
	// manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	SensorValue[lineBack] = sensorNone;
	SensorValue[lineRight] = sensorNone;
	SensorValue[lineLeft] = sensorNone;
	SensorValue[GyroPosition] = sensorNone;
	wait1Msec(1000);


	SensorValue[GyroPosition] = sensorGyro;
	SensorValue[lineBack] = sensorLineFollower;
	SensorValue[lineRight] = sensorLineFollower;
	SensorValue[lineLeft] = sensorLineFollower;
	wait1Msec(1000);

	SensorFullCount[GyroPosition] = 3600;
	SensorValue[GyroPosition] = 0;
	nMotorEncoder[wheelRight] = 0;

	COLOR_BASE_BACK = SensorValue[lineBack];
	COLOR_BASE_RIGHT = SensorValue[lineRight];
	COLOR_BASE_LEFT = SensorValue[lineLeft];


	writeDebugStreamLine("");
	writeDebugStreamLine("-------------------------- Starts --------------------------");
	writeDebugStreamLine("");
	// startAuton(FULLPOWER);

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...

}

bool startAuton(int power) {

	clearTimer(T2);
	int tcur = getLiftPosition();
	if (tcur > MIN_LIFT){
		return true;
	}

	moveLift(-power);
	wait1Msec(200);

	while (getLiftDown() == 0){
		// writeDebugStreamLine("in");
		// wait1Msec(50);

		moveLift(-power);
		if (vexRT[Btn8L] == 1 || time1[T2] > 1000)
		{
			writeDebugStreamLine("timeout");

			stopLift();
			return false;
		}
	}

	// writeDebugStreamLine("out");

	stopLift();

	return true;
}


/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{

	long startTime = nPgmTime;

	startAuton(FULLPOWER);

	if (autonomousMode == 1)
	{
		autonCone20(1);
	}
	else if (autonomousMode == 2)
	{
		autonCone20(1);
	}
	else if (autonomousMode == 3)
	{
		autonCone5(true);
	}
	else if (autonomousMode == 4)
	{
		autonCone5(false);
	}
	else if (autonomousMode == 5)
	{
		autonStationary();
	}
	else if (autonomousMode == 6)
	{
		programmingSkill();
	}


	writeDebugStreamLine("autonomous) Time: %d", nPgmTime - startTime);

	// ..........................................................................
	// Insert user code here.
	// ..........................................................................

	// Remove this function call once you have "real" code.

}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/


// task updateSensors()
// {
// 	while (true)
// 	{
// 		wait1Msec(50);
// 		GLOGAL_MOBILELIFTPOSITION = SensorValue(mobileLiftPosition);
// 	}
// }

task move()
{
	while (true)
	{
		wait1Msec(50);

		int ch1 = vexRT[Ch1];
		int ch3 = vexRT[Ch3];

		if (abs(ch1) > 17)
		{

			if (autonomousMode == drivingSkillMode)
			{
				ch1 = ch1 * 3 / 5;
				//ch3 = ch3 * 2 / 3; //fastest pair was 3/5 for turning and 4/5 for going back and forth
			}

			TurnHelper(ch1);
		}
		else if (abs(ch3) > 17)
		{
			MoveHelper(ch3);
		}
		else
		{
			MoveHelper(0);
		}
		// motor[wheelLeft] = motor[wheelLeftMid] = -ch3 - ch1;
		// motor[wheelRight] = motor[wheelRightMid] = ch3 - ch1;

		// if (abs(motor[wheelRight]) < 17 || abs(motor[wheelLeft]) < 17)
		// {
		// 	motor[wheelLeft] = motor[wheelLeftMid] = 0;
		// 	motor[wheelRight] = motor[wheelRightMid] = 0;
		// }
	}
}




task lift()
{
	while (true)
	{
		wait1Msec(50);

		if (vexRT[Btn8R] == 1) {
			if (vexRT[Btn7U] == 1) { //Move Lift up with btn 7U
				LIFT_STATUS = "manual";
				moveLiftUp(FULLPOWER); //80
			}

			else if (vexRT[Btn7D] == 1){ //Move Lift down with btn 7D
				LIFT_STATUS = "manual";
				// moveLiftDownAndHold_Touch(powerliftDown); //-40
				moveLiftDown(FULLPOWER); //-40

			}
			else if (vexRT[Btn7R] == 1){
				moveMobileLiftDownAndStop(false);
				// moveMobileLiftDownToPickUp();
			}
			else if (vexRT[Btn7L] == 1){
				moveMobileLiftUpAndStop();
			}
			else if (vexRT[Btn6U] == 1){
				if (CONE_COUNT < 1){
					moveLiftUpForStationaryGoal(STATIONARY_LIFT);
				}
				else
				{
					int clawLiftPosition = getClawLiftPosition();
					int targetSG = getLiftTargetPositionForStationaryGoal_Reverse();

					// writeDebugStreamLine("6U> targetSG: %d", liftPosition, targetSG);


					if (clawLiftPosition >= MID_CLAWLIFT){

						LIFT_TARGET = getLiftPosition();

						if (STATIONARY_GOAL_TARGET == 0){
							// writeDebugStreamLine("");
							scoreStationaryGoal_Prepare();
						}
						else
						{
							scoreStationaryGoal_Part1(targetSG + 150);
						}
					}
					else if (clawLiftPosition < MID_CLAWLIFT)
					{
						bool ret = scoreStationaryGoal_Part2(LIFT_TARGET + 200);
						if (ret){
							getLiftTargetPositionForStationaryGoal_Reverse_Increase();
						}
					}

				}
			}
			else if (vexRT[Btn6D] == 1){
				if (CONE_COUNT < 1){
					moveLiftUpForStationaryGoal(STATIONARY_LIFT);
				}
				else
				{
					//bool ret = true;

					while(CONE_COUNT > 1) {
						bool cont = false;
						long startTime = nPgmTime;

						int liftPosition = getLiftPosition();


						int targetSG = getLiftTargetPositionForStationaryGoal_Reverse();

						// writeDebugStreamLine("6D> liftPosition: %d, targetSG: %d", liftPosition, targetSG);


						bool ret = scoreStationaryGoal_Part1(targetSG + 150);
						if (ret){
							ret = scoreStationaryGoal_Part2(liftPosition + 150);
							if (ret){
								cont = true;

								getLiftTargetPositionForStationaryGoal_Reverse_Increase();

								clearTimer(T1);

								while(time1[T1] < 300){
									// writeDebugStreamLine("CONE_COUNT: %d", CONE_COUNT);

									if (vexRT[Btn8L] == 1){
										writeDebugStreamLine("8L");
										cont = false;
										break;
									}
								}
							}
						}

						if (!cont){
							writeDebugStreamLine("break");
							break;
						}

						writeDebugStreamLine("continue) CONE_COUNT: %d, Time: %d", CONE_COUNT, nPgmTime - startTime);


						// ret = scoreStationaryGoal_Part1();
						// if (!ret){
						// 	break;
						// }
						// ret = scoreStationaryGoal_Part2();
						// if (!ret){
						// 	break;
						// }
					}

					stopAll();
				}
			}


			// if (vexRT[Btn5U] == 0 && vexRT[Btn5D] == 0){
			// 	stopClawLift();
			// }

			if (LIFT_STATUS == "manual" && vexRT[Btn7U] == 0 && vexRT[Btn7D] == 0){
				stopLift();
			}

			if (vexRT[Btn7R] == 0 && vexRT[Btn7L] == 0){
				stopMobileLift();
			}
		}
		else if (vexRT[Btn8R] == 0) {

			if (vexRT[Btn7U] == 1) {

				writeDebugStreamLine("7U");

				CONE_COUNT++;
				int liftTarget = getLiftTargetPosition(false);
				liftTarget = liftTarget + MIN_LIFT;
				int clawLiftPosition = getClawLiftPosition();
				// int liftTarget = getNewLiftTargetPosition(false, true);

				// int liftPosition = getLiftPosition();

				// if (liftPosition < MIN_LIFT && clawLiftPosition < MIN_CLAWLIFT){
				// 	LiftDownPickUpClawLiftUpLiftDown_PART1_2();
				// }
				// else
				if (clawLiftPosition >= MID_CLAWLIFT){
					LiftDownPickUpClawLiftUpLiftDown_PART1(liftTarget, false);
					LiftDownPickUpClawLiftUpLiftDown_PART2(liftTarget, false);
				}
				else if (clawLiftPosition < MID_CLAWLIFT)
				{
					LiftDownPickUpClawLiftUpLiftDown_PART2(liftTarget, false);
				}
			}
			else if (vexRT[Btn7D] == 1) {

				writeDebugStreamLine("7D");

				int liftTarget = getLiftTargetPosition(false);
				liftTarget = liftTarget + MIN_LIFT;

				int clawLiftPosition = getClawLiftPosition();
				// int liftTarget = getCurrentLiftTargetPosition(false);

				// int liftPosition = getLiftPosition();

				// if (liftPosition < MIN_LIFT && clawLiftPosition < MIN_CLAWLIFT){
				// 	LiftDownPickUpClawLiftUpLiftDown_PART1_2();
				// }
				// else
				if (clawLiftPosition >= MID_CLAWLIFT){
					LiftDownPickUpClawLiftUpLiftDown_PART1(liftTarget, false);
					LiftDownPickUpClawLiftUpLiftDown_PART2(liftTarget, false);
				}
				else if (clawLiftPosition < MID_CLAWLIFT)
				{
					LiftDownPickUpClawLiftUpLiftDown_PART2(liftTarget, false);
				}
			}
			else if (vexRT[Btn7L] == 1){
				if (autonomousMode == drivingSkillMode){
					moveMobileLiftUpAndStopDrivingSkill();
				}
				else{
					moveMobileLiftUpAndStop();
				}

			}
			else if (vexRT[Btn7R] == 1){
				writeDebugStreamLine("7R");

				moveMobileLiftDownToPickUp();
			}
			else if (vexRT[Btn8U] == 1){
				PickUpAndMoveLiftUp();
			}
			else if (vexRT[Btn8D] == 1){


				moveClawLiftDown(powerClawLiftDown);

				int clawLiftPosition = getClawLiftPosition();
				while (true){

					clawLiftPosition = getClawLiftPosition();
					if (clawLiftPosition < MIN_CLAWLIFT){
						break;
					}

					if (vexRT[Btn8L] == 1)
					{
						break;
					}


				}
				stopClawLift();

				wait1Msec(200);




				closeClaw(FULLPOWER);
				moveLiftDown(FULLPOWER);

				while (true){

					if (vexRT[Btn8L] == 1)
					{
						stopClaw();
						break;
					}
					else if (vexRT[Btn8U] == 1 || getLiftDown() == 1)
					{
						break;
					}
				}

				holdDownLift();



			}
			// else if (vexRT[Btn8U] == 2){

			// 	writeDebugStreamLine("8U");

			// 	CONE_COUNT++;
			// 	int liftTarget = getLiftTargetPosition(true);
			// 	liftTarget = liftTarget + MIN_LIFT;

			// 	bool ret = LiftDownPickUpClawLiftUpLiftDown_PART1(liftTarget, true);
			// 	if (ret){
			// 		LiftDownPickUpClawLiftUpLiftDown_PART2(liftTarget, true);
			// 	}
			// }
			// else if (vexRT[Btn8D] == 2){

			// 	writeDebugStreamLine("8D");

			// 	int liftTarget = getLiftTargetPosition(true);
			// 	liftTarget = liftTarget + MIN_LIFT;

			// 	bool ret = LiftDownPickUpClawLiftUpLiftDown_PART1(liftTarget, true);
			// 	if (ret){
			// 		LiftDownPickUpClawLiftUpLiftDown_PART2(liftTarget, true);
			// 	}
			// }

			if (vexRT[Btn7R] == 0 && vexRT[Btn7L] == 0){
				stopMobileLift();
			}
		}
	}
}

void PickUpAndMoveLiftUp()
{
	closeClaw(FULLPOWER);
	wait1Msec(200);
	closeClaw(powerClawHold);

	// writeDebugStreamLine("1 ClawPower: %d", motor[clawMotor]);
	moveLiftUp(FULLPOWER);

	// writeDebugStreamLine("2 ClawPower: %d", motor[clawMotor]);

	while (true){

		// writeDebugStreamLine("3 ClawPower: %d", motor[clawMotor]);


		int liftPosition = getLiftPosition();

		if (liftPosition > MAX_LIFT + 50){
			holdLiftAuton();
		}

		if (vexRT[Btn8L] == 1)
		{
			// stopClaw();
			break;
		}
		else if (vexRT[Btn5U] == 1 || vexRT[Btn5D] == 1 || vexRT[Btn8D] == 1)
		{
			break;
		}
	}


	// writeDebugStreamLine("4 ClawPower: %d", motor[clawMotor]);

	holdLift();
}

bool LiftDownPickUpClawLiftUpLiftDown_PART1(int target, bool manualFeed)
{
	writeDebugStreamLine("PART1> Target: %d, Cone: %d", target, CONE_COUNT);

	LIFT_STATUS = "LiftDownPickUpClawLiftUpLiftDown_PART1";
	// READY PICKUP
	openClaw(powerClawOpen);
	wait1Msec(400);

	bool ret = true;

	ret = PushORUpCone(false);
	if (CONE_COUNT >= 11)
	{
		wait1Msec(100);
	}
	// writeDebugStreamLine("201");

	stopClaw();



	ret = moveClawLiftDownAndStop(MID_CLAWLIFT, powerClawLiftDown /*powerClawLiftDown*/);
	if (!ret){
		return false;
	}
	LIFT_STATUS = "";


	writeDebugStreamLine("PART1> clawLiftPosition: %d", getClawLiftPosition());


	writeDebugStreamLine("202");

	wait1Msec(100);

	return true;
}

bool LiftDownPickUpClawLiftUpLiftDown_PART2(int target, bool manualFeed)
{
	writeDebugStreamLine("PART2> Target: %d, Cone: %d, clawLiftPosition: %d", target, CONE_COUNT, getClawLiftPosition());
	LIFT_STATUS = "LiftDownPickUpClawLiftUpLiftDown_PART2";

	// int target = getCurrentLiftTargetPosition(manualFeed, false);
	// int target = liftValue + offset;
	LIFT_TARGET = target;
	bool ret = true;

	// PICKUP
	closeClaw(FULLPOWER);

	while(getClawLiftPosition() > MIN_CLAWLIFT){
		if (vexRT[Btn8L] == 1)
		{
			return false;
		}
	}

	writeDebugStreamLine("PART2> clawLiftPosition: %d", getClawLiftPosition());

	if (manualFeed){
		int tTarget = FEED_LIFT;// - 100 + 100;
		int tPower = 80 + 20;

		tPower = FULLPOWER;

		ret = moveLiftDownAndStop(tTarget, tPower);
		if (!ret){
			return false;
		}
		wait1Msec(200);
	}
	else {
		int tPower = FULLPOWER;
		if (CONE_COUNT >= 10){
			tPower = 80;
		}
		else if (CONE_COUNT >= 8){
			tPower = 95;
		}

		tPower = FULLPOWER;
		ret = moveLiftDownAndHold_Touch(tPower);
		if (!ret){
			return false;
		}

		wait1Msec(200);
	}

	// // PICK UP CONE AND HOLD
	// wait1Msec(450 - 250);

	// CONE HOLD
	if (manualFeed) {
		closeClaw(powerClawHold + 10);
	}
	else {
		closeClaw(powerClawHold);
	}


	if (manualFeed){
		if (CONE_COUNT >= 3){
			ret = moveLiftUpAndHold_Smart(target + 50, FULLPOWER);
			if (!ret){
				writeDebugStreamLine("!ret");
				return false;
			}
		}

		wait1Msec(100);


		// writeDebugStreamLine("100 - 4");

	}
	else {

		// writeDebugStreamLine("102");

		if (CONE_COUNT > 0){
			if (CONE_COUNT == 2) {
				target += 100;
			}
			ret = moveLiftUpAndHold_Smart(target, FULLPOWER);
			if (!ret){
				return false;
			}
		}
	}

	// writeDebugStreamLine("Target:%d, Lift Position: %d", target, getLiftPosition());


	// writeDebugStreamLine("103");

	// CLAW LIFT UP
	ret = moveClawLiftUpAndStop(MID_CLAWLIFT, powerClawLiftUp);
	if (!ret){
		return false;
	}

	// writeDebugStreamLine("104");
	// waitUntil(getClawLiftPosition() >= MAX_CLAWLIFT);


	// while (getClawLiftPosition() < MAX_CLAWLIFT){
	// 	// moveClawLiftUp(power);
	// 	if (vexRT[Btn8L] == 1)
	// 	{
	// 		return false;
	// 	}
	// }

	// writeDebugStreamLine("105");


	// int tcur = getLiftPosition();
	// writeDebugStreamLine("LiftDownPickUpClawLiftUpLiftDown) CONE_COUNT: %d, target: %d, lift: %d", CONE_COUNT, target,  tcur);




	// PUSH CONE DOWN
	if (CONE_COUNT < 1){
		moveLiftDownAndStop_Touch(powerliftDown);
		// moveLiftDownAndStop(MIN_LIFT, powerliftDown);
		openClaw(powerClawOpen);
		wait1Msec(100);
		stopClaw();
	}
	else
	{
		// moveClawLiftUp(10);
		// writeDebugStreamLine("106");
		if (CONE_COUNT >= 10)
		{
			wait1Msec(200);
		}
		//ret = PushORUpCone(true);
		moveLiftDown(powerliftDown);
		int waiter = 270;
		wait1Msec(waiter);
		stopLift();
		stopClawLift();

		if (!ret){
			return false;
		}

		// writeDebugStreamLine("107");

		stopClaw();

	}


	LIFT_STATUS = "";

	// writeDebugStreamLine("108");

	return true;
}


void PushAndUpCone(){
	writeDebugStreamLine("Starts");
	moveLiftDown(powerliftDown);
	// int waiter = 250;
	wait1Msec(200);
	stopLift();

	openClaw(powerClawOpen);
	wait1Msec(200);

	moveLiftUp(FULLPOWER);
	wait1Msec(200);
	stopLift();
	stopClaw();

	writeDebugStreamLine("Ends");
}

bool PushORUpCone(bool pushDown){

	// int tPower = FULLPOWER;
	//int offset = 30;
	bool ret = true;

	if (pushDown == true){
		moveLiftDown(powerliftDown);
		int waiter = 300;
		wait1Msec(waiter);
		stopLift();

	}
	else{
		// writeDebugStreamLine("Up");
		moveLiftUp(FULLPOWER);
		// writeDebugStreamLine("Up 1");
		int waiter = 200;

		// if (CONE_COUNT > 7){
		// 	waiter = 300;
		// }

		wait1Msec(waiter);
		// writeDebugStreamLine("Up 2");
		holdLift();
	}


	// if (manualFeed){
	// 	toff = 100;
	// 	tPower = FULLPOWER;
	// }

	// writeDebugStreamLine("toff: %d, tPower: %d", toff, tPower);

	return ret;
}

bool scoreStationaryGoal_Prepare()
{
	// writeDebugStreamLine("prepare");


	closeClaw(FULLPOWER / 2);
	wait1Msec(300);
	closeClaw(powerClawHold + 20);

	moveLiftUp(FULLPOWER);
	// writeDebugStreamLine("Up 1");
	int waiter = 300;

	wait1Msec(waiter);
	// writeDebugStreamLine("Up 2");
	holdLift();
	wait1Msec(100);

	// STATIONARY_LIFT_TARGET = getLiftPosition();

	moveClawLiftDownAndStop(MIN_CLAWLIFT, powerClawLiftDown / 2);

	const int offset = 100;

	while(true)
	{
		int curLift = getLiftPosition();

		if (vexRT[Btn7U] == 1){
			// writeDebugStreamLine("prepare> up");
			moveLiftUpAndHold(curLift + offset, FULLPOWER);
			holdLiftAuton();
		}
		else if (vexRT[Btn7D] == 1){
			// writeDebugStreamLine("prepare> down");
			moveLiftDownAndStop(curLift - offset, powerliftDown);
			// moveLiftDownAndHold(curLift - offset, powerliftDown);
		}
		else if (vexRT[Btn8R] == 1){
			writeDebugStreamLine("prepare> commited");
			STATIONARY_GOAL_TARGET = getLiftPosition();
			stopLift();
			return true;
		}
		else if (vexRT[Btn8L] == 1){
			writeDebugStreamLine("canceled");
			stopLift();
			return false;
		}
	}

	// PushORUpCone(true);
}

bool scoreStationaryGoal_Part1(int targetSG)
{
	writeDebugStreamLine("part1");

	if (targetSG > MAX_LIFT){
		targetSG = MAX_LIFT;
	}

	if (CONE_COUNT < 2){
		return false;
	}

	writeDebugStreamLine("MG: %d, SG: %d", CONE_COUNT,  CONE_COUNT_STATIONARY);


	closeClaw(powerClawClose);
	writeDebugStreamLine("1 closeclaw");

	moveLiftDown(powerliftDown);
	wait1Msec(200);
	stopLift();


	wait1Msec(250);
	closeClaw(powerClawHold + 20);//
	writeDebugStreamLine("2 closeclaw");


	moveLiftUp(FULLPOWER);
	// writeDebugStreamLine("Up 1");
	int waiter = 300;

	wait1Msec(waiter);
	// writeDebugStreamLine("Up 2");


	int tcur = getLiftPosition();
	bool ret = true;
	if ((tcur + 100) < targetSG){
		// writeDebugStreamLine("part1> up");
		ret = moveLiftUpAndHold(targetSG, FULLPOWER);
		if (!ret){
			return false;
		}

		holdLiftAuton();

		wait1Msec(100);

		ret = moveClawLiftDownAndStop(MIN_CLAWLIFT, (powerClawLiftDown / 2) + 20);
		if (!ret){
			return false;
		}
	}
	else
	{
		// writeDebugStreamLine("part1> down");

		holdLift();
		wait1Msec(200);

		ret = moveClawLiftDownAndStop(MIN_CLAWLIFT, powerClawLiftDown / 2);
		if (!ret){
			return false;
		}

		wait1Msec(100);

		ret = moveLiftDownAndStop(targetSG, powerliftDown + 45);
		if (!ret){
			return false;
		}
	}

	writeDebugStreamLine("3 closeclaw");
	//closeClaw(FULLPOWER);


	return true;
}

bool scoreStationaryGoal_Part2(int targetMG)
{
	// writeDebugStreamLine("part2");

	//int clawLiftPower = 100;

	if (targetMG > MAX_LIFT){
		targetMG = MAX_LIFT;
	}

	if (CONE_COUNT < 2 || STATIONARY_GOAL_TARGET == 0){
		return false;
	}

	// PushORUpCone(true);


	moveLiftDown(powerliftDown);
	wait1Msec(150);
	stopLift();


	wait1Msec(100);

	openClaw(powerClawOpen);

	wait1Msec(300);


	// ret = moveLiftUpAndStop(targetMG, FULLPOWER);
	// if (!ret){
	// 	return false;
	// }

	int tcur = getLiftPosition();
	bool ret = true;
	if (tcur < targetMG){
		// writeDebugStreamLine("part2> up 0");
		ret = moveLiftUpAndStop(targetMG, FULLPOWER);
		// writeDebugStreamLine("part2> up 1");

		if (!ret){
			return false;
		}


		stopClaw();
		// writeDebugStreamLine("part2> up 2");

		ret = moveClawLiftUpAndStop(MAX_CLAWLIFT, powerClawLiftUp);

		// writeDebugStreamLine("part2> up 3");

		if (!ret){
			return false;
		}

		// writeDebugStreamLine("part2> up 4");


	}
	else
	{
		// writeDebugStreamLine("part2> down 0");
		PushORUpCone(false);
		// writeDebugStreamLine("part2> down 1");

		ret = moveClawLiftUpAndStop(MAX_CLAWLIFT, powerClawLiftUp);
		// writeDebugStreamLine("part2> down 2");

		if (!ret){
			return false;
		}

		// writeDebugStreamLine("part2> down 3");

		ret = moveLiftDownAndStop(targetMG, powerliftDown);
		if (!ret){
			return false;
		}
		// writeDebugStreamLine("part2> down 4");

	}


	moveLiftDown(powerliftDown - 15);
	closeClaw(powerClawClose);
	wait1Msec(100 + 100);
	stopLift();
	wait1Msec(100);
	stopClaw();


	CONE_COUNT_STATIONARY++;
	CONE_COUNT--;

	return true;
}

void moveLiftUpForStationaryGoal(int liftValue)
{

	bool ret = moveClawLiftDownAndStop(MIN_CLAWLIFT, powerClawLiftDown);
	if (!ret){
		return;
	}

	ret = moveLiftDownAndHold_Touch(FULLPOWER);
	if (!ret){
		return;
	}

	closeClaw(powerClawClose);

	// PICK UP CONE AND HOLD
	wait1Msec(350);

	// CONE HOLD
	closeClaw(powerClawHold);
	// CLAW LIFT UP
	moveClawLiftUpAndStop(MAX_CLAWLIFT, FULLPOWER);
	wait1Msec(100);

	int tcur = getLiftPosition();
	if (tcur < liftValue) {
		ret = moveLiftUpAndStop(liftValue, FULLPOWER);
		if (!ret){
			return;
		}
	}

	bool moveUp = true;

	while(true)
	{
		int offset = getLiftTargetPositionForStationaryGoal();
		int target = liftValue + offset;
		bool ret = true;
		bool adjustHeight = false;

		// LIFT UP
		// ret = moveLiftUpAndHold_Smart(target, FULLPOWER);
		int tcur = getLiftPosition();
		if (moveUp) {
			ret = moveLiftUpAndStop(tcur + 50, FULLPOWER);
			if (!ret){
				return;
			}
		}
		else {
			ret = moveLiftDownAndHold(tcur - 50, powerliftDown);
			if (!ret){
				return;
			}
		}



		writeDebugStreamLine("MoveLiftUpForStationaryGoal) CONE_COUNT: %d, target: %d, lift: %d", CONE_COUNT, target,  tcur);


		while (getStaionaryGoal() == 0){

			if (vexRT[Btn8L] == 1)
			{
				return;
			}

			if (vexRT[Btn7U] == 1)
			{
				//CONE_COUNT_STATIONARY++;
				moveUp = true;
				adjustHeight = true;
				break;
			}
			else if (vexRT[Btn7D] == 1)
			{
				//CONE_COUNT_STATIONARY--;
				moveUp = false;
				adjustHeight = true;
				break;
			}
		}

		if (!adjustHeight){
			tcur = getLiftPosition();
			ret = moveLiftDownAndStop(tcur - 150, powerliftDown);

			if (!ret){
				return;
			}

			wait1Msec(100);

			openClaw(powerClawOpen);
			wait1Msec(300);

			stopClaw();

			ret = moveLiftUpAndHold(target, FULLPOWER);
			if (!ret){
				return;
			}

			CONE_COUNT_STATIONARY++;
			break;
		}
	}

	// MoveIEM()
}

void moveLiftUpForStationaryGoal(int liftValue)
{
	int offset = getLiftTargetPositionForStationaryGoal();
	int target = liftValue + offset;
	bool ret = true;

	// PICKUP
	closeClaw(powerClawClose);

	ret = moveLiftDownAndHold_Touch(powerliftDown);
	if (!ret){
		return;
	}


	// PICK UP CONE AND HOLD
	wait1Msec(300);

	// CONE HOLD
	closeClaw(10);

	moveClawLiftUp(FULLPOWER);

	wait1Msec(100);

	// LIFT UP
	// ret = moveLiftUpAndHold_Smart(target, FULLPOWER);
	ret = moveLiftUpAndHold(target, FULLPOWER);
	if (!ret){
		return;
	}

	int tcur = getLiftPosition();
	writeDebugStreamLine("MoveLiftUpForStationaryGoal) CONE_COUNT: %d, target: %d, lift: %d", CONE_COUNT, target,  tcur);


	// CLAW LIFT UP
	moveClawLiftUpAndStop(MAX_CLAWLIFT, FULLPOWER);

	while (getStaionaryGoal() == 0){

		if (vexRT[Btn8L] == 1)
		{
			return;
		}
	}

	tcur = getLiftPosition();
	ret = moveLiftDownAndStop(tcur - 50, powerliftDown);

	if (!ret){
		return;
	}

	wait1Msec(100);

	openClaw(powerClawOpen);
	wait1Msec(300);

	stopClaw();

	ret = moveLiftUpAndStop(target, FULLPOWER);
	if (!ret){
		return;
	}

	CONE_COUNT_STATIONARY++;
}

void moveLiftUpForStationaryGoalAuton(int liftValue)
{
	int offset = getLiftTargetPositionForStationaryGoal();
	int target = liftValue + offset;
	bool ret = true;

	// PICKUP
	//closeClaw(FULLPOWER);

	/*ret = moveLiftDownAndHold_Touch(powerliftDown);
	if (!ret){
	return;
	}


	// PICK UP CONE AND HOLD
	wait1Msec(300);*/

	// CONE HOLD
	closeClaw(30);

	// moveClawLiftUp(FULLPOWER);

	wait1Msec(100);

	// LIFT UP
	// ret = moveLiftUpAndHold_Smart(target, FULLPOWER);
	ret = moveLiftUpAndHold(target, FULLPOWER);
	if (!ret){
		return;
	}

	int tcur = getLiftPosition();
	writeDebugStreamLine("MoveLiftUpForStationaryGoal) CONE_COUNT: %d, target: %d, lift: %d", CONE_COUNT, target,  tcur);


	// CLAW LIFT UP
	// moveClawLiftUpAndStop(MAX_CLAWLIFT, FULLPOWER);

	while (getStaionaryGoal() == 0){

		if (vexRT[Btn8L] == 1)
		{
			return;
		}
	}
	MoveHelper(0);
	wait1Msec(500);
	tcur = getLiftPosition();
	ret = moveLiftDownAndStop(tcur - 150, powerliftDown);

	if (!ret){
		return;
	}

	wait1Msec(100);

	openClaw(powerClawOpen);
	wait1Msec(300);

	stopClaw();

	ret = moveLiftUpAndStop(target, FULLPOWER);
	if (!ret){
		return;
	}

	CONE_COUNT_STATIONARY++;
}

task clawLift()
{
	while (true)
	{
		wait1Msec(50);

		if (vexRT[Btn8R] == 1) {

			if (vexRT[Btn5U] == 1){
				LIFT_STATUS = "manual";
				moveClawLiftUp(powerClawLiftUp);
			}
			else if (vexRT[Btn5D] == 1){
				LIFT_STATUS = "manual";
				moveClawLiftDown(powerClawLiftDown);
			}
		}
		else if (vexRT[Btn8R] == 0) {

			if (vexRT[Btn5U] == 1){

				// closeClaw(FULLPOWER);
				holdLift();
				int clawLiftPosition = getClawLiftPosition();

				if (clawLiftPosition < MID_CLAWLIFT){
					moveClawLiftUp(powerClawLiftUp);

					while(true){
						clawLiftPosition = getClawLiftPosition();

						if (clawLiftPosition > MID_CLAWLIFT){
							break;
						}

						if (vexRT[Btn8L] == 1)
						{
							// stopClaw();
							break;
						}
					}

					stopClawLift();
				}
				else{

					writeDebugStreamLine("Call In");
					PushAndUpCone();
					writeDebugStreamLine("Call Out");

					CONE_COUNT++;

				}

			}
			else if (vexRT[Btn5D] == 1){

				// closeClaw(FULLPOWER);
				holdLift();
				int clawLiftPosition = getClawLiftPosition();

				if (clawLiftPosition < MID_CLAWLIFT){
					moveClawLiftUp(powerClawLiftUp);

					while(true){
						clawLiftPosition = getClawLiftPosition();

						if (clawLiftPosition > MID_CLAWLIFT){
							break;
						}

						if (vexRT[Btn8L] == 1)
						{
							// stopClaw();
							break;
						}
					}

					stopClawLift();
				}
				else{

					openClaw(powerClawOpen);

					while(true){

						if (vexRT[Btn8L] == 1)
						{
							// stopClaw();
							break;
						}
						else if (vexRT[Btn8D] == 1)
						{
							break;
						}
					}

					// stopClaw();

					CONE_COUNT++;

				}
			}
		}

		// if (vexRT[Btn8R] == 2) {
		// 	if (vexRT[Btn5U] == 1){
		// 		moveClawLiftUpAndStop(MID_CLAWLIFT, powerClawLiftUp);
		// 	}
		// 	else if (vexRT[Btn5D] == 1){
		// 		moveClawLiftDownAndStop(MIN_CLAWLIFT, powerClawLiftDown);
		// 	}
		// }

		if (LIFT_STATUS == "manual" && vexRT[Btn5U] == 0 && vexRT[Btn5D] == 0){
			stopClawLift();
		}
	}
}

task claw()
{
	while (true)
	{
		wait1Msec(50);

		if (vexRT[Btn8R] == 0) {
			if (vexRT[Btn6U] == 1){

				closeClaw(FULLPOWER);

				// int liftPos = getLiftPosition();
				// int clawLiftPos = getClawLiftPosition();

				// if (liftPos < MIN_LIFT && clawLiftPos < MIN_CLAWLIFT){
				// 	closeClaw(FULLPOWER);
				// 	bool ret = moveLiftDownAndHold_Touch(FULLPOWER);
				// 	if (!ret){
				// 		moveLiftUpAndStop(liftPos + 20, 30);
				// 		// return;
				// 	}
				// }
			}
			else if (vexRT[Btn6D] == 1){
				openClaw(FULLPOWER);
				wait1Msec(250);
				stopClaw();
			}
		}
	}
}


task usercontrol()
{
	startTask(move);
	startTask(lift);
	startTask(claw);
	startTask(clawLift);
	// startTask(updateSensors);
	// User control code here, inside the loop
	//int on = 0;
	while (true)
	{
		wait1Msec(50);


		int btnLCD = nLCDButtons;
		if (btnLCD > 0)
		{
			AutonomousSelector(btnLCD);
			// startTask(displayBatteryLevelOnLCD);
		}

		while(vexRT[Btn8L] == 1){
			stopAll();
		}
	}
}

// -------------------------------------
// SENSORS
int getLiftPosition()
{
	return SensorValue(liftPosition);
}

int getLiftDown()
{
	return SensorValue(liftDown);
}

int getClawLiftPosition()
{
	return SensorValue(clawLiftPosition);
}

int getMobileLiftPosition()
{
	return SensorValue(mobileLiftPosition);
	// if (GLOGAL_MOBILELIFTPOSITION > 0) {
	// 	writeDebugStreamLine("GLOGAL_MOBILELIFTPOSITION: %d", GLOGAL_MOBILELIFTPOSITION);
	// 	return GLOGAL_MOBILELIFTPOSITION;
	// }
	// else
	// {
	// int value = SensorValue(mobileLiftPosition);
	// writeDebugStreamLine("SensorValue: %d", value);
	// return SensorValue(value);
	// }
}

int getMobileLiftDown()
{
	return SensorValue(mobileLiftDown);
}

int getStaionaryGoal()
{
	return SensorValue(stationaryGoal);
}

void ClearEncoder() {
	// writeDebugStreamLine("ClearEncoder");
	nMotorEncoder[wheelRight] = 0;
	// SensorValue[Wheel] = 0;
}

int getLine(LineType lineType)
{
	switch (lineType){
	case Right:
		return getLineRight();
	case Left:
		return getLineLeft();
	case Back:
		return getLineBack();
	default:
		return getLineBack();
	}
}

int getLineDiff(LineType lineType)
{
	int tline = getLine(lineType);
	int diff = 0;
	switch (lineType){
	case Right:
		diff = COLOR_BASE_RIGHT - tline;
		break;
	case Left:
		diff = COLOR_BASE_LEFT - tline;
		break;
	case Back:
		diff = COLOR_BASE_BACK - tline;
		break;
	default:
		diff =  COLOR_BASE_BACK - tline;
		break;
	}

	if (diff > 200){
		diff = 10;
	}
	return diff;
}

int getLineBack()
{
	return SensorValue(lineBack);
}

int getLineRight()
{
	return SensorValue(lineRight);
}

int getLineLeft()
{
	return SensorValue(lineLeft);
}



// END SENSORS


// -------------------------------------
// STOPS
void stopAll(){

	LIFT_STATUS = "";

	motor[armLiftLeftB] = 0;
	// motor[armLiftLeftT] = 0;
	motor[armLiftRightB] = 0;
	// motor[armLiftRightT] = 0;
	motor[clawMotor] = 0;
	motor[clawLiftL] = 0;
	motor[clawLiftR] = 0;
	motor[mobileLift] = 0;
	motor[wheelLeft] = motor[wheelLeftMid] = 0;
	motor[wheelRight] = motor[wheelRightMid] = 0;
}
// END STOPS

// -------------------------------------
// LIFT
int getLiftTargetPositionForStationaryGoal_Reverse(){
	// writeDebugStreamLine("getLiftTargetPositionForStationaryGoal_Reverse");
	return STATIONARY_GOAL_TARGET;
}


int getLiftTargetPositionForStationaryGoal_Reverse_Increase(){
	// writeDebugStreamLine("getLiftTargetPositionForStationaryGoal_Reverse_Increase");
	STATIONARY_GOAL_TARGET = STATIONARY_GOAL_TARGET + 120;
	if (CONE_COUNT_STATIONARY >= 7){
		STATIONARY_GOAL_TARGET = STATIONARY_GOAL_TARGET + 120;
	}

	writeDebugStreamLine("CONE_COUNT_STATIONARY: %d, STATIONARY_GOAL_TARGET:%d", CONE_COUNT_STATIONARY, STATIONARY_GOAL_TARGET);

	return STATIONARY_GOAL_TARGET;
}

int getLiftTargetPositionForStationaryGoal(){

	// int offset = 0;
	int offset = 30;
	if (CONE_COUNT_STATIONARY > 7){
		offset = 50;
	}
	return CONE_COUNT_STATIONARY * offset;

}

int getLiftTargetPosition(bool manualFeed){

	// int offset = 0;
	if (manualFeed){
		int offset = 80; //120
		int count = CONE_COUNT - 3;

		if (CONE_COUNT >= 4){
			count = CONE_COUNT + 1;
		}

		return count * offset;
	}
	else {
		int offset = 100; //120
		int count = CONE_COUNT - 2;


		if (CONE_COUNT >= 11){
			count = CONE_COUNT + 3;
		}

		return count * offset;
	}
}


void holdLift(){
	LIFT_STATUS = "holdLift";

	moveLift(20);
}

void holdLiftAuton() {
	LIFT_STATUS = "holdLift";
	moveLift(25);
}

void holdDownLift(){
	LIFT_STATUS = "holdLift";

	// writeDebugStreamLine("holdDownLift");
	moveLift(-15);
}

void stopLift(){
	LIFT_STATUS = "stopLift";

	moveLift(0);
}

void moveLiftUp(int power) {

	// LIFT_STATUS = "moveLiftUp";

	if (getLiftPosition() >= MAX_LIFT)
	{
		return;
	}
	moveLift(power);
}

void moveLiftDown(int power) {

	// LIFT_STATUS = "moveLiftDown";

	// if (getLiftPosition() <= MIN_LIFT)
	if (getLiftDown() == 1)
	{
		return;
	}
	moveLift(-power);
}

void moveLift(int power){

	// LIFT_STATUS = "moveLift";

	int newPower = AdjustPowerUsingBatteryLevel(power);
	// motor[armLiftLeftT] = -newPower; // Left Top. Comment this for 2 motors lift design.
	motor[armLiftLeftB] = newPower;
	motor[armLiftRightB] =  newPower;
	// motor[armLiftRightT] = -newPower; // Right Top. Comment this for 2 motors lift design.
}

// HELPER
bool moveLiftUpAndStop(int distance, int power) {

	int current = getLiftPosition();

	while (current < distance){

		wait1Msec(50);

		//int previous = current;

		moveLiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			stopLift();
			return false;
		}

		current = getLiftPosition();
	}
	stopLift();

	return true;
}

bool moveLiftUpAndStop_Forecast(int distance, int power) {

	float offset = 0;
	int current = getLiftPosition();

	while (current + offset < distance){

		wait1Msec(50);

		int previous = current;


		moveLiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			stopLift();
			return false;
		}

		current = getLiftPosition();

		offset = current - previous;
		offset = offset * 5;

	}
	stopLift();

	return true;
}


bool moveLiftUpAndHold_Smart(int distance, int power) {

	if (distance > MAX_LIFT){
		distance = MAX_LIFT;
	}


	float newDis = distance * 4 / 5;

	// if (CONE_COUNT > 7){
	// 	 newDis = distance * 4 / 5;
	// }

	int current = getLiftPosition();

	while (current < distance){

		wait1Msec(50);

		moveLiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			stopLift();
			return false;
		}

		current = getLiftPosition();

		if (current >= newDis){
			moveClawLiftUp(30);
		}
	}
	holdLift();

	return true;
}


bool moveLiftUpAndHold_Normal(int distance, int power) {

	if (distance > MAX_LIFT){
		distance = MAX_LIFT;
	}

	int current = getLiftPosition();

	while (current < distance){

		wait1Msec(50);

		moveLiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			stopLift();
			return false;
		}

		current = getLiftPosition();
	}
	holdLift();

	return true;
}


bool moveLiftUpAndHold(int distance, int power) {

	if (distance > MAX_LIFT){
		distance = MAX_LIFT;
	}

	// float offset = 0;
	int current = getLiftPosition();

	while (current /*+ offset*/ < distance){

		wait1Msec(50);

		//int previous = current;


		moveLiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			stopLift();
			return false;
		}

		current = getLiftPosition();

		// offset = current - previous;
		// offset = offset * 5;

	}
	holdLift();

	return true;
}

bool moveLiftUpAndHoldAuton(int distance, int power) {

	// float offset = 0;
	int current = getLiftPosition();

	while (current /*+offset*/ < distance){

		wait1Msec(50);

		//int previous = current;


		moveLiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			stopLift();
			return false;
		}

		current = getLiftPosition();

		// offset = current - previous;
		// offset = offset * 5;

	}
	holdLiftAuton();

	return true;
}

bool moveLiftDownAndHold_Touch(int power) {

	clearTimer(T2);
	while (getLiftDown() == 0){
		// wait1Msec(50);

		moveLift(-power);
		if (vexRT[Btn8L] == 1 || time1[T2] > 2000)
		{
			stopLift();
			return false;
		}
	}

	holdDownLift();

	return true;
}

bool moveLiftDownAndStop_Touch(int power) {

	clearTimer(T2);
	while (getLiftDown() == 0){
		// wait1Msec(50);

		moveLift(-power);
		if (vexRT[Btn8L] == 1 || time1[T2] > 1000)
		{
			stopLift();
			return false;
		}
	}

	stopLift();

	return true;
}


bool moveLiftDownAndStop(int distance, int power) {

	// clearTimer(T2)
	int cur = getLiftPosition();
	int prev = -100;
	int count = 0;
	while (cur > distance){

		wait1Msec(50);

		moveLiftDown(power);

		if ( /*time1[T2] >= 5000) ||*/ vexRT[Btn8L] == 1 || vexRT[Btn7U] == 1 || vexRT[Btn7D] == 1) {
			stopLift();
			return false;
		}

		if ((cur/10) == (prev/10)) {
			count++;

			if (count > 3)
			{
				writeDebugStreamLine("moveLiftDownAndStop) count: %d", count);
				stopLift();
				return false;
			}
		}

		else {
			count = 0;
		}

		prev = cur;
		cur = getLiftPosition();
	}
	// wait1Msec(200);
	stopLift();

	return true;
}

bool moveLiftDownAndHold(int distance, int power) {

	// clearTimer(T2)
	int cur = getLiftPosition();
	int prev = -100;
	int count = 0;
	while (cur > distance){

		wait1Msec(50);

		moveLiftDown(power);

		if ( /*time1[T2] >= 5000) ||*/ vexRT[Btn8L] == 1) {
			break;
		}

		if ((cur/10) == (prev/10)) {
			count++;

			if (count > 3)
			{
				writeDebugStreamLine("moveLiftDownAndStop) count: %d", count);
				stopLift();
				return false;
			}
		}

		else {
			count = 0;
		}

		prev = cur;
		cur = getLiftPosition();
	}
	// wait1Msec(200);
	holdDownLift();

	return true;
}
// END MOVES

// -------------------------------------
// CLAW LIFT
void stopClawLift(){
	moveClawLift(0);
}

void moveClawLiftUp(int power){
	moveClawLift(power);
}

void moveClawLiftDown(int power){
	moveClawLift(-power);
}

void moveClawLift(int power){
	// int newPower = AdjustPowerUsingExternalBatteryLevel(power);

	int newPower = power;

	motor[clawLiftL] = newPower;
	motor[clawLiftR] = -newPower;
}

bool moveClawLiftUpAndStop(int distance, int power) {

	while (getClawLiftPosition() < distance){
		moveClawLiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			return false;
		}
	}
	stopClawLift();

	return true;
}

bool moveClawLiftDownAndContinue(int distance, int power) {

	clearTimer(T4);
	while (getClawLiftPosition() > distance){
		wait1Msec(50);

		moveClawLiftDown(power);
		if (vexRT[Btn8L] == 1)
		{
			return false;
		}

		if (time1[T4] >= 2000) {
			return false;
		}

	}
	return true;
}


bool moveClawLiftDownAndStop(int distance, int power) {

	clearTimer(T4);
	int clawLiftPosition = getClawLiftPosition();

	while (clawLiftPosition > distance || clawLiftPosition < ERROR_CLAWLIFT){
		wait1Msec(50);

		clawLiftPosition = getClawLiftPosition();
		moveClawLiftDown(power);
		if (vexRT[Btn8L] == 1)
		{
			return false;
		}

		if (time1[T4] >= 2000) {
			return false;
		}

	}
	stopClawLift();

	return true;
}
// END CLAW LIFT


// -------------------------------------
// CLAW
void stopClaw(){
	// writeDebugStreamLine("stopClaw");
	moveClaw(0);
}

void openClaw(int power){
	moveClaw(power);
}

void closeClaw(int power){
	moveClaw(-power);
}

void moveClaw(int power){
	motor[clawMotor] = power;
}

// -------------------------------------
// MOBILE LIFT
void stopMobileLift(){
	moveMobileLift(0);
}

void moveMobileLiftUp(int power){
	moveMobileLift(power);
}

void moveMobileLiftDown(int power){
	moveMobileLift(-power);
}


void moveMobileLift(int power){
	motor[mobileLift] = power;
}

void moveMobileLiftUpToStackAuton(int powerLift, int distanceClawLift, int powerClawLift) {
	moveLiftUpAndStop(LIFT_PICK_MOBILE, powerLift);
	wait1Msec(200);
	moveMobileLiftUpAndStop();
}

void moveMobileLiftUpAndStop() {

	while (getMobileLiftPosition() < MAX_MOBILELIFT){
		moveMobileLiftUp(FULLPOWER);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}

	stopMobileLift();

	CONE_COUNT = 0;
	STATIONARY_GOAL_TARGET = 0;
}

void moveMobileLiftUpAndStopDrivingSkill() {

	while (getMobileLiftPosition() < DRIVING_MOBILELIFT){
		moveMobileLiftUp(FULLPOWER);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}

	stopMobileLift();

	CONE_COUNT = 0;
	STATIONARY_GOAL_TARGET = 0;
}

void moveMobileLiftUpAuton(){
	while (getMobileLiftDown() == 1) {
		moveMobileLiftUp(FULLPOWER);
	}
}

void moveMobileLiftDownToPickUp() {
	int liftPosition = getLiftPosition();
	bool higher = true;

	if (CONE_COUNT == 0){
		higher = false;
		bool ret = moveLiftUpAndStop(LIFT_PICK_MOBILE, FULLPOWER);
		if (!ret){
			return;
		}
	}
	else if (liftPosition <= LIFT_PICK_MOBILE)
	{
		higher = false;
		openClaw(powerClawOpen);
		wait1Msec(50);

		bool ret = moveLiftUpAndStop(LIFT_PICK_MOBILE, FULLPOWER);
		if (!ret){
			return;
		}

		stopClaw();

		// wait1Msec(200);
		// moveClawLiftUpAndStop(FULLPOWER);
		wait1Msec(300);

	}
	else if (liftPosition > LIFT_PICK_MOBILE)
	{
		moveLiftDown(FULLPOWER / 2);
		// closeClaw(FULLPOWER / 2);
		// int waiter = 80;
		wait1Msec(100);
		stopLift();
		// stopClaw();
	}

	moveMobileLiftDownAndStop(higher);
}

void moveMobileLiftDownToPickUpAuton() {
	if (CONE_COUNT < 4){
		closeClaw(10);
	}

	//bool ret = moveLiftUpAndHold(LIFT_PICK_MOBILE, FULLPOWER);
	//if (!ret){
	//	return;
	//}

	//holdLiftAuton();

	// wait1Msec(200);
	// moveClawLiftUpAndStop(FULLPOWER);
	wait1Msec(300);
	moveMobileLiftDownAndStopAuton(0);
}

void moveMobileLiftDownAndStop(bool higher) {
	int mobileLiftDown = getMobileLiftDown();
	int mobileLiftPosition = getMobileLiftPosition();

	// writeDebugStreamLine("1 moveMobileLiftDownAndStop> mobileLiftPosition: %d, STOP_MOBILELIFT: %d", mobileLiftPosition, STOP_MOBILELIFT);


	openClaw(FULLPOWER/2);
	wait1Msec(100);
	stopClaw();

	while (mobileLiftDown == 0){
		wait1Msec(50);
		moveMobileLiftDown(FULLPOWER);
		moveClawLiftDown(30);

		if (vexRT[Btn8L] == 1)
		{
			break;
		}

		mobileLiftDown = getMobileLiftDown();
		mobileLiftPosition = getMobileLiftPosition();

		// writeDebugStreamLine("2 moveMobileLiftDownAndStop> mobileLiftPosition: %d, STOP_MOBILELIFT: %d", mobileLiftPosition, STOP_MOBILELIFT);


		// writeDebugStreamLine("mobileLiftDown: %d", mobileLiftDown);
		if (mobileLiftDown == 1 || mobileLiftDown != 0)
		{
			break;
		}


		if (mobileLiftPosition < STOP_MOBILELIFT){
			// writeDebugStreamLine("3 moveMobileLiftDownAndStop> mobileLiftPosition: %d, STOP_MOBILELIFT: %d", mobileLiftPosition, STOP_MOBILELIFT);

			moveClawLiftDown(10);

			if (higher){

				stopMobileLift();
				// moveClawLiftDown(40);
				// int tcur = getLiftPosition();
				// moveLiftUpAndStop(tcur + 70, 100);
			}

		}
	}

	stopMobileLift();
	stopClawLift();

	//int liftPosition = getLiftPosition();
	if (higher) {
		// if (liftPosition > LIFT_PICK_MOBILE){
		wait1Msec(200);
		openClaw(FULLPOWER);
		wait1Msec(200);
		int tcur = getLiftPosition();
		moveLiftUpAndStop(tcur + 100, 100);
		moveClawLiftUpAndStop(MAX_CLAWLIFT, FULLPOWER / 2);
		// int tcur = getLiftPosition();
		// moveLiftUpAndStop(tcur + 100, 100);
	}

	stopClaw();
}

void moveMobileLiftDownAndStopAuton(int distance) {
	bool ret = moveLiftUpAndHoldAuton(LIFT_PICK_MOBILE - 100, FULLPOWER);
	if (!ret){
		return;
	}

	if (distance == 0) {
		while (getMobileLiftDown() == 0){
			wait1Msec(50);
			moveMobileLiftDown(FULLPOWER);
			if (vexRT[Btn8L] == 1)
			{
				break;
			}
		}
		stopMobileLift();
	}
	else {
		writeDebugStreamLine("moveMobileLiftDownAndStopAuton: MGLiftPosistion %d, distance: %d", getMobileLiftPosition(), distance);

		moveMobileLiftDown(FULLPOWER);
		wait1Msec(300);

		int moveLiftPosition = getMobileLiftPosition();
		while (moveLiftPosition > distance){
			moveLiftPosition = getMobileLiftPosition();
			// writeDebugStreamLine("IN: moveLiftPosition: %d", moveLiftPosition);

			wait1Msec(50);
			// writeDebugStreamLine("IN 2");
			// writeDebugStreamLine("IN 3");
			if (vexRT[Btn8L] == 1)
			{
				// writeDebugStreamLine("IN 4");
				break;
			}
		}
		writeDebugStreamLine("OUT");
		stopMobileLift();
	}
}
// END MOBILE LIFT

// -------------------------------------
// MOVE
bool MoveLine(LineType lineType, int power) {
	// ClearEncoder();

	//writeDebugStreamLine("MoveValue_Accel) Started ===");
	//int velocity = 0;
	//int position = 0;
	//int value = 0;
	clearTimer(T3);
	int newPower = AdjustPowerUsingExternalBatteryLevelToMove(power);

	int diff = getLineDiff(lineType);
	MoveHelper(newPower);
	// MoveHelper(newPower);

	while (true){
		// writeDebugStreamLine("in");
		// wait1Msec(20);

		if (time1[T3] >= 4000){
			writeDebugStreamLine("timeout");
			MoveHelper(0);
			return false;
		}

		diff = getLineDiff(lineType);
		// writeDebugStreamLine("diff) diff: %d", diff);

		if (diff > COLOR_DIFF){
			// writeDebugStreamLine("MoveLine) diff: %d", diff);

			// writeDebugStreamLine("diff!!!");
			break;
		}
		// wait1Msec(100);
	}
	// writeDebugStreamLine("out");

	return true;
}

bool MoveLineStop(LineType lineType, int power) {
	bool ret = MoveLine(lineType, power);
	MoveHelper(0);
	return ret;
}

void MoveIEM(int distance, int power) {
	ClearEncoder();
	clearTimer(T3);
	int position = nMotorEncoder[wheelRight];
	power = AdjustPowerUsingExternalBatteryLevelToMove(power);
	while (abs(position)<abs(distance)){
		position = nMotorEncoder[wheelRight];
		// writeDebugStreamLine("MoveValue_IEM) pos: %d, distance: %d ", position, distance);

		if (time1[T3] >= 2000)
		{
			break;
		}
		MoveHelper(power);
	}
	MoveHelper(0);
}

void MoveHelper(int power)
{
	motor[wheelLeft] = motor[wheelLeftMid] = -power;
	motor[wheelRight] = motor[wheelRightMid] = power;
}

bool TurnLine(LineType lineType, int power) {
	// wait1Msec(time);
	clearTimer(T3);
	int newPower = AdjustPowerUsingExternalBatteryLevelToMove(power);

	int diff = getLineDiff(lineType);

	writeDebugStreamLine("TurnLine - before In) diff: %d", diff);
	if (diff > COLOR_DIFF){
		// writeDebugStreamLine("diff!!!");
		return true;
	}

	TurnHelper(newPower);
	// TurnHelperRight(newPower);
	// MoveHelper(newPower);

	while (true){
		// writeDebugStreamLine("in");
		// wait1Msec(50);

		if (time1[T3] >= 4000){

			TurnHelper(0);
			writeDebugStreamLine("timeout");
			return false;
		}

		diff = getLineDiff(lineType);


		// if (diff > 20){
		// 	writeDebugStreamLine("TurnLine) diff > 20: %d", diff);
		// 	// writeDebugStreamLine("diff!!!");
		// 	// break;
		// }

		if (diff > COLOR_DIFF){
			// writeDebugStreamLine("TurnLine) diff: %d", diff);
			// writeDebugStreamLine("diff!!!");
			break;
		}
		// wait1Msec(100);
	}
	writeDebugStreamLine("out");

	TurnHelper(0);

	return true;
}

void TurnGyro(int distance, int power) {
	// wait1Msec(time);
	SensorValue[GyroPosition] = 0;
	int newPower = AdjustPowerUsingExternalBatteryLevel(power);
	while (abs(SensorValue[GyroPosition])<abs(distance)){
		TurnHelper(newPower);
	}
	TurnHelper(0);
}

void TurnHelper(int power)
{
	motor[wheelLeft] = motor[wheelLeftMid] = -power;
	motor[wheelRight] = motor[wheelRightMid] = -power;
}

// -------------------------------------
// ADJUST BATTERY
int AdjustPowerUsingBatteryLevel(int originalPower)
{
	return originalPower;
	// float batteryLevel = nImmediateBatteryLevel;
	// float batteryOffset =	7500 / batteryLevel;
	// int adjustedPower = originalPower * batteryOffset;
	// //  writeDebugStreamLine("(AjustBattery) BatterLevel: %d - OriginalPower: %d - WantedPower: %d", AdjustBatteryLevel, OriginalPower, WantedPower);
	// return adjustedPower;
}

int AdjustPowerUsingExternalBatteryLevel(int originalPower)
{
	return originalPower;
	// float batteryLevel = SensorValue[ExternalBatteryValue] * 3.57;

	// float batteryOffset =	7500 / batteryLevel;
	// int adjustedPower = originalPower * batteryOffset;
	// //  writeDebugStreamLine("(AjustBattery) BatterLevel: %d - OriginalPower: %d - WantedPower: %d", AdjustBatteryLevel, OriginalPower, WantedPower);
	// return adjustedPower;
}

int AdjustPowerUsingExternalBatteryLevelToMove(int originalPower)
{
	// return originalPower;
	float batteryLevel = SensorValue[ExternalBatteryValue] * 3.57;

	float batteryOffset = 7500 / batteryLevel;
	int adjustedPower = originalPower * batteryOffset;
	//  writeDebugStreamLine("(AjustBattery) BatterLevel: %d - OriginalPower: %d - WantedPower: %d", AdjustBatteryLevel, OriginalPower, WantedPower);
	return adjustedPower;
}


// END ADJUST BATTERY


// -------------------------------------
// LCD
void AutonomousSelector(int btnLCD)
{
	writeDebugStreamLine("AutonomousSelector) button: %d", btnLCD);

	bLCDBacklight=true;

	displayBatteryLevelOnLCD(autonomousMode);
	int autonomousModeValue = autonomousMode;

	int button = 0;
	while(true)
	{
		button = nLCDButtons;

		if (button == 2 || vexRT[Btn8L] == 1)
		{
			displayBatteryLevelOnLCD(autonomousModeValue);

			bLCDBacklight=false;
			break;
		}
		else if (button == 1 || vexRT[Btn6U] == 1)
		{
			if (autonomousModeValue > 1)
			{
				autonomousModeValue--;
			}

			DisplayAutonomousMode(autonomousModeValue);
		}
		else if (button == 4 || vexRT[Btn6D] == 1)
		{
			if (autonomousModeValue < 8)
			{
				autonomousModeValue++;
			}

			DisplayAutonomousMode(autonomousModeValue);
		}
	}

	bLCDBacklight=false;
}

void DisplayAutonomousMode(int autonomousModeValue)
{
	writeDebugStreamLine("DisplayAutonomousMode) autonomousModeValue: %d", autonomousModeValue);

	clearLCDLine(0);                                            // Clear line 1 (0) of the LCD
	clearLCDLine(1);                                            // Clear line 2 (1) of the LCD

	string text;
	//}
	switch(autonomousModeValue)
	{
	case 1:
		{
			text = "autonCone20_1Cone";
			break;
		}
	case 2:
		{
			text = "autonCone20_2Cones";
			break;
		}
	case 3:
		{
			text = "autonCone5_Left";
			break;
		}
	case 4:
		{
			text = "autonCone5_Right";
			break;
		}
	case 5:
		{
			text = "autonStationary";
			break;
		}
	case 6:
		{
			text = "ProgrammingSkill";
			break;
		}
	case 7:
		{
			text = "drivingSkill";
			break;
		}
	case 8:
		{
			text = "None";
			break;
		}
	}

	//Display the Primary Robot battery voltage
	// displayLCDString(0, 0, "Autonomous: ");
	displayLCDString(0, 0, text);

	wait1Msec(500);
}

void displayBatteryLevelOnLCD(int autonomousModeValue)
{
	writeDebugStreamLine("displayBatteryLevelOnLCD) autonomousModeValue: %d", autonomousModeValue);

	clearLCDLine(0);                                            // Clear line 1 (0) of the LCD
	clearLCDLine(1);                                            // Clear line 2 (1) of the LCD

	autonomousMode = autonomousModeValue;

	string text;
	sprintf(text, "Selected: %d", autonomousMode); //Build the value to be displayed

	//Display the Primary Robot battery voltage
	// displayLCDString(0, 0, "Autonomous: ");
	displayLCDString(0, 0, text);

	wait1Msec(800);

	//while(true)                                                        // An infinite loop to keep the program running until you terminate it
	//{
	clearLCDLine(0);                                            // Clear line 1 (0) of the LCD
	clearLCDLine(1);                                            // Clear line 2 (1) of the LCD

	string mainBattery, externalBattery;

	//Display the Primary Robot battery voltage
	displayLCDString(0, 0, "Primary: ");
	sprintf(mainBattery, "%1.2f%c", nImmediateBatteryLevel/1000.0,'V'); //Build the value to be displayed
	displayNextLCDString(mainBattery);

	//float externalBatteryLevel = SensorValue[ExternalBatteryValue];
	//Display the Backup battery voltagef
	displayLCDString(1, 0, "External: ");
	sprintf(externalBattery, "%1.2f%c", (SensorValue[ExternalBatteryValue] * 3.57)/1000.0, 'V');    //Build the value to be displayed
	displayNextLCDString(externalBattery);

	//Short delay for the LCD refresh rate
	wait1Msec(500);
}

void programmingSkill() {
	int powerToMove = 70;
	int turnPower = 125;
	int powerToTurn = 65;
	moveMobileLiftDownToPickUpAuton(); //deploy for FIRST mobile goal
	wait1Msec(GLOBAL_WAITER);
	MoveLineStop(Back, FULLPOWER);
	wait1Msec(GLOBAL_WAITER_LONG + 200);
	moveMobileLiftUpAndStop(); // Pick up FIRST MG
	wait1Msec(GLOBAL_WAITER_LONG);

	moveLiftDownAndHold(MIN_LIFT, powerliftDown);
	wait1Msec(GLOBAL_WAITER);

	openClaw(powerClawOpen); //for one cone only!
	wait1Msec(400); //for one cone only!
	stopClaw(); //for one cone only!
	wait1Msec(GLOBAL_WAITER);
	MoveLineStop(Back, -FULLPOWER);
	wait1Msec(GLOBAL_WAITER + 200);
	TurnLine(Back, -(powerToTurn));
	wait1Msec(GLOBAL_WAITER_LONG);
	TurnLine(Left, -(powerToTurn - 22));
	wait1Msec(GLOBAL_WAITER_LONG);
	MoveHelper(30);
	wait1Msec(GLOBAL_WAITER + 100);
	moveMobileLiftDownToPickUpAuton(); // deploy FIRST MG
	MoveHelper(0);
	wait1Msec(GLOBAL_WAITER_LONG);
	MoveIEM(150, -80);
	wait1Msec(GLOBAL_WAITER);
	TurnLine(Back, (powerToTurn - 22)); //turn right 180"
	wait1Msec(GLOBAL_WAITER_LONG);
	TurnLine(Left, (powerToTurn - 25));  //align with SECOND MG
	wait1Msec(GLOBAL_WAITER_LONG);
	// TurnLine(Left, -(powerToTurn - 32));  //align with SECOND MG
	// wait1Msec(GLOBAL_WAITER_LONG);
	// TurnLine(Right, -(powerToTurn - 22));  //align with SECOND MG
	// wait1Msec(GLOBAL_WAITER_LONG);
	HitBarAndAlign();
	MoveHelper(-(powerToMove - 25));
	wait1Msec(GLOBAL_WAITER_LONG);

	MoveHelper(powerToMove - 25);
	wait1Msec(GLOBAL_WAITER + 800);

	MoveLineStop(Right, powerToMove - 20);

	wait1Msec(GLOBAL_WAITER_LONG);

	// wait1Msec(GLOBAL_WAITER);

	MoveHelper(powerToMove); //move forward to grab SECOND MG
	wait1Msec(GLOBAL_WAITER + 600);
	MoveHelper(0); //move forward to grab MG

	moveMobileLiftUpAndStop(); 			//pick up SECOND MG
	wait1Msec(GLOBAL_WAITER_LONG);

	MoveLineStop(Right, FULLPOWER);
	wait1Msec(500);
	TurnGyro(90, turnPower); // 125, 50
	wait1Msec(500);
	MoveLineStop(Back, FULLPOWER);
	wait1Msec(GLOBAL_WAITER);
	MoveIEM(500, 110);
	wait1Msec(GLOBAL_WAITER);
	MoveHelper(50);
	wait1Msec(400);
	MoveHelper(0);
	moveMobileLiftDownAndStop(false); // Deploy SECOND MG
	wait1Msec(GLOBAL_WAITER);
	MoveHelper(-70);
	wait1Msec(GLOBAL_WAITER + 400);
	MoveHelper(0);
	wait1Msec(GLOBAL_WAITER);
	MoveIEM(250 + 100, -100);
	wait1Msec(GLOBAL_WAITER);
	moveMobileLiftUpAndStop();
	wait1Msec(GLOBAL_WAITER_LONG);
	moveLiftDownAndStop(LIFT_PICK_MOBILE, powerliftDown); // LIFT DOWN
	wait1Msec(GLOBAL_WAITER);

	MoveLineStop(Left, powerToMove - 45); //move a bit forward
	wait1Msec(GLOBAL_WAITER + 200);
	MoveLineStop(Left, -(powerToMove - 45)); //move a bit backward
	wait1Msec(GLOBAL_WAITER + 200);
	TurnLine(Back, -(powerToTurn - 20));  //turn left
	wait1Msec(GLOBAL_WAITER);
	MoveIEM(90, -80); //move back
	wait1Msec(GLOBAL_WAITER + 200);
	TurnLine(Left, -(powerToTurn - 30));  //align with bar
	HitBarAndAlign();

	TurnGyro(25, -100); // Make thing similar to the starting position.
	moveMobileLiftDownToPickUpAuton(); //deploy for THIRD mobile goal
	wait1Msec(GLOBAL_WAITER);
	MoveLineStop(Back, FULLPOWER);
	wait1Msec(GLOBAL_WAITER_LONG + 200);
	moveMobileLiftUpAndStop();  // Pick up THIRD mobile goal
	wait1Msec(GLOBAL_WAITER_LONG);
	MoveLineStop(Back, -(FULLPOWER-20));
	wait1Msec(GLOBAL_WAITER_LONG + 300);
	TurnLine(Back, -(powerToTurn));
	wait1Msec(GLOBAL_WAITER_LONG);
	TurnLine(Right, -(powerToTurn + 10));
	wait1Msec(GLOBAL_WAITER_LONG);
	TurnGyro(25 - 25, 80);
	wait1Msec(GLOBAL_WAITER);
	MoveHelper(40);
	wait1Msec(GLOBAL_WAITER + 100);
	moveMobileLiftDownToPickUpAuton(); // deploy THIRD MG
	MoveHelper(0);
	wait1Msec(GLOBAL_WAITER_LONG);
	MoveIEM(150, -80);
	wait1Msec(GLOBAL_WAITER);
	TurnLine(Back, (powerToTurn)); //turn right 180"
	wait1Msec(GLOBAL_WAITER_LONG);
	TurnLine(Left, (powerToTurn));  //align with FOURTH MG
	wait1Msec(GLOBAL_WAITER_LONG + 100);
	TurnLine(Left, -(powerToTurn + 60)); //turn back to match
	wait1Msec(GLOBAL_WAITER_LONG + 200);
	HitBarAndAlign();
	wait1Msec(GLOBAL_WAITER);
	MoveHelper(powerToMove - 25);
	wait1Msec(GLOBAL_WAITER + 800);

	MoveLineStop(Right, powerToMove - 20);

	wait1Msec(GLOBAL_WAITER_LONG);

	// wait1Msec(GLOBAL_WAITER);

	MoveHelper(powerToMove); //move forward to grab FOURTH MG
	wait1Msec(GLOBAL_WAITER + 600);
	MoveHelper(0); //move forward to grab MG

	moveMobileLiftUpAndStop(); 			//pick up FOURTH MG
	wait1Msec(GLOBAL_WAITER_LONG);

	MoveLineStop(Right, FULLPOWER);
	wait1Msec(500);
	TurnGyro(70, turnPower); // 125, 50
	wait1Msec(500);
	MoveLineStop(Back, FULLPOWER);
	wait1Msec(GLOBAL_WAITER);
	MoveIEM(500, 110);
	wait1Msec(GLOBAL_WAITER);
	MoveHelper(50);
	wait1Msec(500);
	MoveHelper(0);
	moveMobileLiftDownAndStop(false);  // deploy FOURTH MG
	wait1Msec(GLOBAL_WAITER);
	MoveHelper(-70);
	wait1Msec(GLOBAL_WAITER + 400);
	MoveHelper(0);
	// wait1Msec(GLOBAL_WAITER);
	// MoveIEM(250 + 100, -100);
	// wait1Msec(GLOBAL_WAITER);
	// moveMobileLiftUpAndStop();
	// wait1Msec(GLOBAL_WAITER_LONG);

}


void programmingSkillFirst() {


	//bool ret = autoCommon();
	//if (!ret){
	//	return;
	//}

	//moveMobileLiftUpAndStop();
	//wait1Msec(GLOBAL_WAITER);
	//MoveIEM(250, -100);
	//wait1Msec(GLOBAL_WAITER);
	//moveMobileLiftUpAndStop();
	//wait1Msec(1000);

	bool ret = Prepare_2ND_MG();
	if (!ret){
		return;
	}

	ret = programmingSkill_Pick_2nd_MG();
	if (!ret){
		return;
	}


	programmingSkill_Pick_3rd_MG();


	// move back
	moveMobileLiftUpAndStopDrivingSkill();
	wait1Msec(GLOBAL_WAITER);
	MoveIEM(250 + 100, -100);
	wait1Msec(GLOBAL_WAITER);
	moveMobileLiftUpAndStop();
	wait1Msec(GLOBAL_WAITER_LONG);



	ret = Prepare_2ND_MG();
	if (!ret){
		return;
	}

	ret = programmingSkill_Pick_2nd_MG();
	if (!ret){
		return;
	}




}

bool programmingSkill_Pick_3rd_MG() {


	int powerToMove = 70;
	int powerToTurn = 50;

	MoveLineStop(Left, powerToMove - 45);
	wait1Msec(GLOBAL_WAITER_LONG);


	writeDebugStreamLine("7-1");

	bool ret = TurnLine(Back, (powerToTurn - 22)); //turn right 180"
	if (!ret){
		return false;
	}
	wait1Msec(GLOBAL_WAITER_LONG);
	writeDebugStreamLine("8");

	ret = TurnLine(Right, (powerToTurn - 17));  //align with MG
	if (!ret){
		return false;
	}

	wait1Msec(GLOBAL_WAITER_LONG);

	//ret = TurnLine(Right, -(powerToMove - 20));  //align with MG
	//	if (!ret){
	//		return false;
	//	}

	//wait1Msec(GLOBAL_WAITER + 200);

	// wait1Msec(GLOBAL_WAITER + 200);
	// writeDebugStreamLine("8-1");

	// ret = TurnLine(Left, (powerToMove - 22));  //align with MG
	// 	if (!ret){
	// 		return;
	// 	}


	// writeDebugStreamLine("8-2");


	// MoveLineStop(Right, -powerToMove);
	// wait1Msec(GLOBAL_WAITER + 200);

	// writeDebugStreamLine("8-3");

	// MoveIEM(200, -50);


	HitBarAndAlign();



	moveMobileLiftDownToPickUpAuton(); // Deploy to pick up

	// writeDebugStreamLine("8-5");
	MoveHelper(powerToMove - 25);
	wait1Msec(GLOBAL_WAITER + 800);

	MoveLineStop(Right, powerToMove - 20);

	wait1Msec(GLOBAL_WAITER_LONG);

	// wait1Msec(GLOBAL_WAITER);

	MoveHelper(powerToMove); //move forward to grab MG
	wait1Msec(GLOBAL_WAITER + 600);
	MoveHelper(0); //move forward to grab MG

	moveMobileLiftUpAndStopDrivingSkill(); 			//pick up MG
	wait1Msec(GLOBAL_WAITER_LONG);


	TurnGyro(200, 50);
	wait1Msec(5000);

	ret = MoveLine(Right, powerToMove);
	if (!ret){
		return false;
	}

	writeDebugStreamLine("1004");
	wait1Msec(1000);
	ret = MoveLineStop(Back, powerToMove - 25);
	if (!ret){
		return false;
	}
	writeDebugStreamLine("1005");

	wait1Msec(GLOBAL_WAITER_LONG + 100);
	ret = MoveLineStop(Right, -(powerToMove - 25));
	if (!ret){
		return false;
	}

	writeDebugStreamLine("1006");

	wait1Msec(GLOBAL_WAITER_LONG);
	ret = TurnLine(Back, -(powerToTurn-20));
	if (!ret){
		return false;
	}

	writeDebugStreamLine("1007");

	wait1Msec(GLOBAL_WAITER_LONG);
	//ret = TurnLine(Back, (powerToMove-20));
	//if (!ret){
	//	return false;
	//}
	//wait1Msec(GLOBAL_WAITER);

	writeDebugStreamLine("1008");


	MoveIEM(200, -(powerToMove + 15));


	writeDebugStreamLine("1009");

	wait1Msec(GLOBAL_WAITER_LONG);
	ret = TurnLine(Left, (powerToTurn - 20));
	if (!ret){
		return false;
	}

	writeDebugStreamLine("1009-1");

	wait1Msec(GLOBAL_WAITER_LONG);
	ret = TurnLine(Left, -(powerToTurn - 20));
	if (!ret){
		return false;
	}

	writeDebugStreamLine("1010");

	MoveHelper(120);
	wait1Msec(1000);
	MoveHelper(0);
	// MoveIEM(500, 110 + 10);
	writeDebugStreamLine("1011");
	wait1Msec(GLOBAL_WAITER);
	moveMobileLiftDownAndStopAuton(HIGHGOAL_MOBILELIFT);
	writeDebugStreamLine("1012");
	MoveHelper(50);
	wait1Msec(500);
	writeDebugStreamLine("1013");
	MoveHelper(0);
	wait1Msec(GLOBAL_WAITER);
	writeDebugStreamLine("1014");
	MoveHelper(-70);
	wait1Msec(GLOBAL_WAITER + 200);
	writeDebugStreamLine("1015");
	MoveHelper(0);
	wait1Msec(GLOBAL_WAITER);

	return true;
}


void programmingSkill1() {
	//int powerToMove = 70;

	//int powerToMove = 70;

	bool ret = autoCommon(1);
	if (!ret){
		return;
	}

	moveMobileLiftUpAndStop();
	wait1Msec(GLOBAL_WAITER);
	MoveIEM(250, -100);
	wait1Msec(GLOBAL_WAITER);
	moveMobileLiftUpAndStop();
	wait1Msec(1000);



	ret = Prepare_2ND_MG();
	if (!ret){
		return;
	}

	ret = programmingSkill_Pick_2nd_MG();
	if (!ret){
		return;
	}

	ret = programmingSkill_Pick_3rd_MG(); // Pick up 3rd MG
	if (!ret){
		return;
	}

	stopAll();
}

void HitBarAndAlign(){

	//int powerToMove = 70;

	MoveHelper(-60);

	wait1Msec(GLOBAL_WAITER + 600);

	MoveHelper(0);
	wait1Msec(GLOBAL_WAITER + 200);

	// moveMobileLiftDownToPickUpAuton(); //deploy mobile goal lift


	writeDebugStreamLine("8-4");

	// MoveHelper(powerToMove);
	// wait1Msec(800);


	//MoveLineStop(Left, powerToMove - 45); // turn Right

	// MoveLineStop(Right, powerToMove - 30);
	//wait1Msec(GLOBAL_WAITER + 200);


	// TurnLine(Left, -(powerToMove - 30)); // turn left

	// wait1Msec(GLOBAL_WAITER + 200);


	// TurnLine(Left, powerToMove - 30); // turn Right

	// wait1Msec(GLOBAL_WAITER + 200);
}

bool Prepare_2ND_MG(){

	int powerToMove = 70;
	int powerToTurn = 50;
	//TurnGyro(800, -50); //turn left
	bool ret = MoveLineStop(Left, powerToMove - 45); //move a bit forward
	if (!ret){
		return false;
	}
	wait1Msec(GLOBAL_WAITER + 200);
	ret = TurnLine(Back, -(powerToTurn - 20));  //turn left
	if (!ret){
		return false;
	}
	wait1Msec(GLOBAL_WAITER);
	MoveIEM(150, -80); //move back
	wait1Msec(GLOBAL_WAITER + 200);

	writeDebugStreamLine("3");
	// ret = TurnLine(Back, -(powerToMove - 20));  //align with line again
	// if (!ret){
	// 	return;
	// }
	// wait1Msec(GLOBAL_WAITER + 200);


	writeDebugStreamLine("4");
	MoveIEM(105 + 50, -80); //move back along line
	wait1Msec(GLOBAL_WAITER + 200);

	writeDebugStreamLine("5");
	ret = TurnLine(Left, -(powerToTurn - 30));  //align with line
	if (!ret){
		return false;
	}
	writeDebugStreamLine("6");

	HitBarAndAlign();

	writeDebugStreamLine("7");

	return true;
}

bool programmingSkill_Pick_2nd_MG(){

	int powerToMove = 70;
	int powerToTurn = 50;

	moveMobileLiftDownToPickUpAuton(); //deploy mobile goal lift
	wait1Msec(GLOBAL_WAITER);


	MoveHelper(powerToMove); //move forward to grab MG
	wait1Msec(GLOBAL_WAITER + 800);
	MoveHelper(0); //move forward to grab MG

	moveMobileLiftUpAndStopDrivingSkill(); //pick up goal
	wait1Msec(GLOBAL_WAITER + 200);

	writeDebugStreamLine("101-1");

	MoveHelper(-(powerToMove - 25)); //move back with MG
	wait1Msec(GLOBAL_WAITER + 800);

	writeDebugStreamLine("101-1-1");

	bool ret = MoveLineStop(Right, -(powerToMove - 30)); // move back
	if (!ret){
		return false;
	}

	//ret = MoveLineStop(Right, (powerToMove - 30)); // move back
	//if (!ret){
	//	return false;
	//}


	// TurnHelper(powerToMove);
	// wait1Msec(GLOBAL_WAITER + 500);
	// writeDebugStreamLine("100");

	writeDebugStreamLine("101-2");

	wait1Msec(GLOBAL_WAITER + 200);



	ret = TurnLine(Back, (powerToTurn - 20)); //turn left 180"
	if (!ret){
		return false;
	}
	wait1Msec(GLOBAL_WAITER + 200);
	writeDebugStreamLine("101-3");


	ret = TurnLine(Right, (powerToTurn + 10)); //turn left 180"
	if (!ret){
		return false;
	}
	wait1Msec(GLOBAL_WAITER + 200);
	writeDebugStreamLine("101-4");


	// ret = TurnLine(Right, -powerToMove + 22); //turn left 180"
	// if (!ret){
	// 	return false;
	// }
	// writeDebugStreamLine("101-4");
	// wait1Msec(GLOBAL_WAITER + 200);


	// ret = TurnLine(Left, powerToMove - 25); //turn left 180"
	// if (!ret){
	// 	return false;
	// }
	// writeDebugStreamLine("101-4");
	// ret = TurnLine(Back, powerToMove - 25); //turn left 180"
	// if (!ret){
	// 	return false;
	// }
	// wait1Msec(GLOBAL_WAITER + 200);

	// ret = TurnLine(Back, -(powerToMove - 35)); //align
	// if (!ret){
	// 	return false;
	// }
	// wait1Msec(GLOBAL_WAITER + 200);

	writeDebugStreamLine("102");

	// MoveHelper(powerToMove);
	// wait1Msec(800);
	// writeDebugStreamLine("103");

	ret = MoveLineStop(Back, powerToMove - 25); //go forward to the bar
	if (!ret){
		return false;
	}



	MoveHelper(powerToMove - 30);
	wait1Msec(500 - 200);
	writeDebugStreamLine("103");
	MoveHelper(0);

	writeDebugStreamLine("104");
	wait1Msec(GLOBAL_WAITER);
	moveMobileLiftDownToPickUpAuton(); //deploy mobile goal /////////////////////// 2ND
	wait1Msec(GLOBAL_WAITER);

	MoveLineStop(Left, -35);
	// MoveIEM(200, -50); //move back*/

	writeDebugStreamLine("105");

	//moveMobileLiftUpAndStop();
	writeDebugStreamLine("106"); // 2nd mobile goal

	// wait1Msec(GLOBAL_WAITER);
	// MoveIEM(200, -50); //move back*/
	writeDebugStreamLine("107"); // 2nd mobile goal

	return true;

}

void autonCone5(bool leftSide) {
	// bool leftSide = false;
	int coneCount = 2;
	int powerToMove = 70;
	moveMobileLiftDownToPickUpAuton();
	//moveLiftUp(20);
	// bool ret = MoveLine(Back, powerToMove + 15 - 20);
	bool ret = MoveLine(Back, powerToMove + 15);
	if (!ret){
		return;
	}

	writeDebugStreamLine("1");
	wait1Msec(300);
	// ret = MoveLineStop(Back, powerToMove - 20);
	ret = MoveLineStop(Back, powerToMove - 15);
	if (!ret){
		return;
	}

	writeDebugStreamLine("2");
	wait1Msec(GLOBAL_WAITER);
	moveMobileLiftUpToStackAuton(FULLPOWER, MAX_CLAWLIFT, powerClawLiftUp);
	wait1Msec(GLOBAL_WAITER);

	// MoveHelper(-FULLPOWER);
	// wait1Msec(1500);

	// ret = MoveLine(Left, -FULLPOWER);
	// if (!ret){
	// 	return;
	// }

	// else {
	moveLiftDownAndHold(MIN_LIFT, powerliftDown);
	wait1Msec(GLOBAL_WAITER);
	openClaw(FULLPOWER); //for one cone only!
	wait1Msec(300); //for one cone only!
	stopLift();
	stopClaw(); //for one cone only!
	//if (leftSide == false) {
	//	wait1Msec(GLOBAL_WAITER);
	//	TurnHelper(-100);
	//	wait1Msec(GLOBAL_WAITER - 25);
	//	TurnHelper(0);
	//	wait1Msec(GLOBAL_WAITER - 50);
	//}
	// }


	if (coneCount > 1){
		// openClaw(powerClawOpen); //for one cone only!
		// wait1Msec(200); //for one cone only!
		// stopClaw(); //for one cone only!

		// moveLiftUpAndStop(LIFT_PICK_MOBILE - 100, FULLPOWER);
		if (leftSide == false) {
			MoveIEM(50 + 25, FULLPOWER);
		}
		else {
			MoveIEM(50 + 25, FULLPOWER);
		}
		pickOneMoreCone();

		writeDebugStreamLine("1003 - Ends Pickup Cone");

		MoveHelper(-powerToMove);
		wait1Msec(200);

	}
	else {
		// moveLiftDownAndStop(MIN_LIFT, powerliftDown);
		// wait1Msec(GLOBAL_WAITER);
		// openClaw(powerClawOpen); //for one cone only!
		// wait1Msec(200); //for one cone only!
		// stopClaw(); //for one cone only!
	}



	ret = MoveLine(Right, -powerToMove);
	if (!ret){
		return;
	}
	if (leftSide == false) {
		wait1Msec(200);
		MoveIEM(300, -powerToMove);
	}
	else {
		wait1Msec(500);
		ret = MoveLineStop(Back, -(powerToMove - 35));
		if (!ret){
			return;
		}
	}
	wait1Msec(GLOBAL_WAITER + 200);

	if (leftSide == false) {
		TurnGyro(800 + 500, 80 + 10);
	}
	else {
		TurnGyro(800 + 200, -80 - 10);
		// ret = TurnLine(Left, -(powerToMove - 20));
		// if (!ret){
		// 	return;
		// }
		// wait1Msec(GLOBAL_WAITER);
		// TurnGyro(500, -50);
	}
	wait1Msec(GLOBAL_WAITER);
	//MoveIEM(150, 80);
	moveMobileLiftDownToPickUp();
	wait1Msec(GLOBAL_WAITER);
	MoveIEM(150 + 400, -80);
	wait1Msec(GLOBAL_WAITER);
}


void pickOneMoreCone20(){
	int powerToMove = 70;

	// moveLiftUpAndStop(MIN_LIFT + 200 - 200, FULLPOWER);
	// writeDebugStreamLine("1003 - Starts Pickup Cone");
	moveClawLiftDownAndStop(MIN_CLAWLIFT, powerClawLiftDown);
	wait1Msec(GLOBAL_WAITER);
	closeClaw(FULLPOWER);
	wait1Msec(GLOBAL_WAITER);
	moveLiftDownAndHold_Touch(FULLPOWER);
	wait1Msec(300);
	moveLiftUpAndStop(MIN_LIFT + 50, FULLPOWER);
	moveClawLiftUpAndStop(MAX_CLAWLIFT, FULLPOWER);

	MoveHelper(-(powerToMove - 25));

	moveLiftDownAndStop(MIN_LIFT, powerliftDown);
	wait1Msec(GLOBAL_WAITER);
	openClaw(powerClawOpen); //for one cone only!
	// wait1Msec(500); //for one cone only!
	// stopClaw(); //for one cone only!
}

void pickOneMoreCone(){
	moveLiftUpAndStop(MIN_LIFT + 200, FULLPOWER);
	writeDebugStreamLine("1003 - Starts Pickup Cone");
	moveClawLiftDownAndStop(MIN_CLAWLIFT, powerClawLiftDown);
	wait1Msec(GLOBAL_WAITER);
	closeClaw(FULLPOWER);
	wait1Msec(GLOBAL_WAITER);
	moveLiftDownAndHold_Touch(FULLPOWER);
	wait1Msec(300);
	moveLiftUpAndStop(MIN_LIFT + 50, FULLPOWER);
	moveClawLiftUpAndStop(MAX_CLAWLIFT, FULLPOWER);

	moveLiftDownAndStop(MIN_LIFT, powerliftDown);
	wait1Msec(GLOBAL_WAITER);
	openClaw(FULLPOWER); //for one cone only!
	wait1Msec(500); //for one cone only!
	stopClaw(); //for one cone only!
}

bool autoCommon(int coneCount) {

	// coneCount = 1;
	int powerToMove = 70;

	moveMobileLiftDownToPickUpAuton();
	//moveLiftUp(20);

	bool ret = MoveLine(Back, powerToMove + 15);
	if (!ret){
		return false;
	}

	writeDebugStreamLine("1001");
	wait1Msec(300);
	ret = MoveLineStop(Back, powerToMove - 15 - 10);
	if (!ret){
		return false;
	}

	writeDebugStreamLine("1002");
	wait1Msec(GLOBAL_WAITER);
	moveMobileLiftUpToStackAuton(FULLPOWER, MAX_CLAWLIFT, powerClawLiftUp);
	wait1Msec(GLOBAL_WAITER);

	// MoveHelper(-FULLPOWER);
	// wait1Msec(1500);

	// ret = MoveLine(Left, -FULLPOWER);
	// if (!ret){
	// 	return;
	// }

	coneCount = 1;

	if (coneCount > 1){
		moveLiftDownAndStop(MIN_LIFT, powerliftDown);
		// wait1Msec(GLOBAL_WAITER);
		openClaw(powerClawOpen); //for one cone only!
		wait1Msec(GLOBAL_WAITER + 200);

		moveLiftUp(FULLPOWER);
		// moveClawLiftDown(powerClawLiftDown);
		MoveIEM(60, FULLPOWER);
		stopClaw(); //for one cone only!
		stopLift();
		wait1Msec(GLOBAL_WAITER);
		pickOneMoreCone20();
		wait1Msec(GLOBAL_WAITER);

		writeDebugStreamLine("1002-1");
	}
	else {
		moveLiftDownAndHold(MIN_LIFT, powerliftDown);
		wait1Msec(GLOBAL_WAITER);
		openClaw(powerClawOpen); //for one cone only!
		wait1Msec(200); //for one cone only!
		stopClaw(); //for one cone only!
		stopLift();
	}


	writeDebugStreamLine("1003");
	ret = MoveLine(Back, -powerToMove);
	if (!ret){
		return false;
	}

	stopClaw(); //for one cone only!

	writeDebugStreamLine("1004");
	wait1Msec(500);
	ret = MoveLineStop(Back, -(powerToMove - 25));
	if (!ret){
		return false;
	}

	writeDebugStreamLine("1005");

	// // wait1Msec(100);
	// ret = MoveLineStop(Left, -30);
	// if (!ret){
	// 	return;
	// }

	wait1Msec(GLOBAL_WAITER + 200);
	ret = TurnLine(Back, -(powerToMove-25));
	if (!ret){
		return false;
	}

	writeDebugStreamLine("1006");

	wait1Msec(GLOBAL_WAITER + 200);
	ret = TurnLine(Back, (powerToMove - 25));
	if (!ret){
		return false;
	}
	wait1Msec(GLOBAL_WAITER);

	writeDebugStreamLine("1007");

	// MoveIEM(490 - 50, -(powerToMove + 10));
	MoveIEM(490 - 50, -(powerToMove + 10)); //this is just right at home, might need to increase at competition

	writeDebugStreamLine("1008");

	wait1Msec(GLOBAL_WAITER + 200);

	bool useGyro = false;

	if (useGyro){
		int turnValue = 600;
		ClearEncoder();
		TurnGyro(turnValue, -(powerToMove));
		wait1Msec(GLOBAL_WAITER + 200);
		int delta = SensorValue[GyroPosition] - turnValue;
		TurnGyro(delta, powerToMove);
		writeDebugStreamLine("Gyro: %d", SensorValue[GyroPosition]);
		writeDebugStreamLine("Encoder: %d", nMotorEncoder[wheelRight]);
	}
	else{
		ret = TurnLine(Right, -(powerToMove)); //might need to increase at competition
		// ret = TurnLine(Left, -(powerToMove-10 - 5));
		if (!ret){
			return false;
		}
	}

	// wait1Msec(10000);
	// ret = TurnLine(Right, -(powerToMove - 20));
	// // ret = TurnLine(Left, -(powerToMove-10 - 5));
	// if (!ret){
	// 	return false;
	// }
	// wait1Msec(GLOBAL_WAITER + 200);
	// wait1Msec(GLOBAL_WAITER + 200);


	// ret = TurnLine(Right, powerToMove - 20);
	// ret = TurnLine(Left, -(powerToMove-10 - 5));
	// if (!ret){
	// 	return false;
	// }

	writeDebugStreamLine("1008-1");

	int mPower = 110;
	int mDistaince = 500;

	if (coneCount > 1) {
		mPower = FULLPOWER;
		mDistaince = 500;
	}
	wait1Msec(GLOBAL_WAITER + 200);

	MoveIEM(mDistaince, mPower);
	wait1Msec(GLOBAL_WAITER);
	writeDebugStreamLine("1009");
	moveMobileLiftDownAndStopAuton(HIGHGOAL_MOBILELIFT);
	writeDebugStreamLine("1010");
	MoveHelper(50);
	wait1Msec(500);
	MoveHelper(0);
	wait1Msec(GLOBAL_WAITER);
	MoveHelper(-70);
	wait1Msec(GLOBAL_WAITER + 200);
	MoveHelper(0);
	wait1Msec(GLOBAL_WAITER);

	return true;
}

void autonCone20(int coneCount) {
	bool ret = autoCommon(coneCount);
	if (!ret){
		return;
	}

	moveMobileLiftUpAuton();
	wait1Msec(GLOBAL_WAITER);
	MoveIEM(250, -100);
	stopAll();

	MoveHelper(0);
}

void autonStationary() {
	closeClaw(10);
	wait1Msec(300);
	MoveHelper(30);
	moveLiftUpForStationaryGoalAuton(STATIONARY_LIFT);
	MoveIEM(300, -30);
	wait1Msec(GLOBAL_WAITER);
	//TurnGyro(750, 70);
	//wait1Msec(GLOBAL_WAITER + 200);
	//MoveAccel(700, 50);
	stopAll();
}

// END LC
